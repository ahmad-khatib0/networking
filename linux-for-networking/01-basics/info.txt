
# using:  $ ip route

From the output, we see that we have a default route pointing to 192.168.122.1. The default route is just 
  that – if a packet is being sent to a destination that isn't in the routing table, the host will send that 
  packet to its default gateway. The routing table will always prefer the "most specific" route – the route 
  that most closely matches the destination IP. If there is no match, then the most specific route goes to 
  the default gateway, which routes to 0.0.0.0 0.0.0.0 (in other words, the "if it doesn't match anything 
  else" route). The host assumes that the default gateway IP belongs to a router, which will (hopefully) then
  know where to send that packet next.
  We also see a route to 169.254.0.0/16. This is called a Link-Local Address as defined in the RFC 3927

Link-Local Addresses only operate in the current subnet – if a host does not have a statically configured IP 
  address, and DHCP does not assign and address, it will use the first two octets defined in the RFC ( 169.254), 
  then compute the last two octets, semi-randomly assigning them. After a Ping/ARP test  to ensure that this 
  computed address is in fact available, the host is ready to communicate. This address is supposed to only 
  communicate with other LLA addresses on the same network segment, typically using broadcast and multicast 
  protocols such as ARP, Alljoyn, and so on to "find" each other. Just for clarity, these addresses are almost 
  never used on real networks, they're the address that gets used if there is absolutely no other alternative. 
  And just for confusion, Microsoft calls these addresses something different – Automatic Private Internet 
  Protocol Addressing (APIPA).

Finally, we see a route to the local subnet, in this case 192.168.122.0/24. This is called a connected route 
  (since it's connected to that interface). This tells the host that no
  routing is needed to communicate with other hosts in its own subnet.
  
This set of routes is very common in simple networks – a default gateway, a local segment,
  and that's it. In many operating systems you won't see the 169.254.0.0 subnet unless
  the host is actually using a link-local address.

A multicast address is used to include several devices in a conversation. For instance, you might use a multicast 
  address to send an identical video stream to a number of network-attached displays, or if you were setting 
  up a conference call or meeting in a voice/video application

The full list of well know, registered multicast addresses is maintained by the IANA (Internet Assigned Numbers Authority), 
  at https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xhtml. While this may seem 
  comprehensive, vendors will often create their own multicast addresses in this address space.

Assigning an IP address to an interface
$ sudo nmcli connection modify "Wired connection 1" ipv4.addresses 192.168.122.22/24
$ sudo nmcli connection modify "Wired connection 1" ipv4.gateway 192.168.122.1
$ sudo nmcli connection modify "Wired connection 1" ipv4.dns "8.8.8.8"
$ sudo nmcli con mod "Wired connection 1" ipv4.method manual 
### Now, let's save the changes and make them "live":
$ sudo nmcli connection up "Wired connection 1"
### Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/5)

To change the DNS servers, edit /etc/resolv.conf and change the nameserver line to reflect the desired server IP:
###   nameserver 8.8.8.8

To change the IP address, subnet mask, and so on, edit the /etc/sysconfig/network-scripts/ifcfg-eth0 
  file and update the values as follows:
###   DEVICE=eth0
###   BOOTPROTO=none
###   ONBOOT=yes
###   NETMASK=255.255.255.0
###   IPADDR=10.0.1.27

If your default gateway is on this interface, you can add this:
GATEWAY=192.168.122.1


== Adding a route: To add a temporary static route, the ip command is our go-to again. In this example, 
   we tell our host to route to 192.168.122.10 to get to the 10.10.10.0/24 network:
###  sudo ip route add 10.10.10.0/24 via 192.168.122.10

This just adds a temporary route, though, which will not survive if the host is restarted or if the network 
  processes are restarted. You can add a permanent static route by using the nmcli command.
### sudo nmcli connection modify "Wired connection1" +ipv4.routes "10.10.11.0/24 192.168.122.11"
### sudo nmcli connection up "Wired connection 1"

== Adding a route using legacy approaches
### sudo route add –net 10.10.12.0 netmask 255.255.255.0 gw 192.168.122.12
-- On an older Debian/Ubuntu distribution, a common method is to edit the /etc/ network/interfaces file 
   to make this changes permanent, add the following line:
### up route add –net 10.10.12.0 netmask 255.255.255.0 gw 192.168.122.12
-- Or, on an older Redhat family distribution, edit the /etc/sysconfig/network-scripts/route-<device name> 
   file and add the following line:
### 10.10.12.0/24 via 192.168.122.12

== Disabling and enabling an interface
### sudo ip link set ens33 down    # and up for enabling 
### sudo ifconfig ens33 down       # legacy way 


At the other end of the spectrum, you'll also often see situations where smaller packets are needed. This is 
  particularly important as not all hosts will detect this well, and many applications will set the DF 
  (Don't Fragment) bit in their traffic. In that situation, you might see a 1,500-byte packet set with DF on a 
  medium that might only support a 1,380-byte packet – in that case, the application will simply fail, and 
  often the error messages won't be helpful in troubleshooting. Where might you see this? Any link that involves
  packets being encapsulated will usually involve this – tunnels or VPN solutions, for instance. These will 
  reduce the frame size (and resulting packet size) by the overhead caused by encapsulation, which is usually 
  pretty easy to compute. Satellite links are another common situation. They'll often default to 512-byte 
  frames – in those situations, the sizes will be published by the service provider.

== Increase MTU (Message Transfer Unit) packet size   
### sudo nmcli con mod "Wired connection 1" 802-3-ethernet.mtu 9000
### sudo nmcli connection up "Wired connection 1"

== Interactive nmcli 
### nmcli connection edit type ethernet




*****************************************************************************
*****************************************************************************
*****************************************************************************

the OSI model: 
== Layers 1-3 are often referred to as the media or network layers, whereas layers 4-7 are
  generally called the host or application layers:

== What is the MAC address though? It's a 12-digit (6-byte/48-bit) address, normally shown in hexadecimal.
  When displayed, each byte or double-byte is usually separated by . or -. So typical MAC addresses might be 
  00-0c-29-3b-73-cb or 9a93.5d84.5a69 (showing both common representations).

== at the start of a TCP conversation you'll see the sending station send a broadcast (a request sent to all 
   stations in the subnet) ARP request saying who has IP address x.x.x.x. The ARP reply from the host that has 
   that address will include That's me, and my MAC address is aaaa.bbbb.cccc. If the target IP address is on 
   a different subnet, the sender will "ARP for" the gateway for that subnet (which will usually be the 
   default gateway, unless there are local routes defined).

== The ARP request is cached on each host in an ARP cache or ARP table, which can be
   displayed using the arp command:    arp -a
   =>> (192.168.122.138) at f0:ef:86:0f:5d:70 [ether] on ens33
   You can see this is pretty simple. It just relates the Layer 3 IP address to the Layer 2
   MAC address to the Layer 1 Network Interface Card (NIC). 
   
==  the matching MAC address table on switches (commonly called the CAM table) is normally at 5 minutes, and 
    the ARP table on routers is normally 14,400 seconds (4 hours). These values are all about resources. In
    aggregate, workstations have the resources to frequently send ARP packets. The switches learn MAC addresses 
    from traffic (including ARP requests and replies), so having that timer be slightly longer than the workstation 
    timer makes sense. Similarly, having a lengthy ARP cache timer on routers conserves its CPU and NIC resources

== the /proc directory in Linux is a "virtual" directory of files that contain the current settings and 
   statuses of various things on your Linux host. These are not "real" files, but they are represented as 
   files so we can use the same commands that we use for files: cat, grep, cut, sort, awk, and so on. You 
   can look at network interface errors and values, such as in /proc/net/dev, for instance (note how things 
   don't quite line up correctly in this listing)

== Legitimate reasons to change a MAC address might include the following:
• You have migrated a firewall and the ISP has your MAC hardcoded.
• You have migrated a host or host NIC, and the upstream router isn't accessible to you, but you can't
  wait 4 hours for the ARP cache to expire on that router.
• You have migrated a host, and there is a DHCP reservation for the old MAC address
  that you need to use, but you don't have access to "fix" that DHCP entry.
• Apple devices will change their wireless MAC addresses for privacy reasons. Given how many other 
  (and easier) methods there are to track a person's identity, this protection isn't usually that effective.
  
== Malicious reasons to change a MAC address include the following:
•  You are attacking a wireless network, and have figured out that once authenticated,
   the only checks that the access point does are against the client MAC addresses.
•  The same as the previous point, but against an Ethernet network that's secured with 802.1x authentication, 
   but with an insecure or incomplete configuration (we'll get into this in more detail in a later chapter).
•  You are attacking a wireless network that has MAC address permissions on it.

== The leading bits of each MAC address are supposed to identify the manufacturer – this value is called the 
   OUI. OUIs are registered with the formal registry maintained by the IEEE and posted at 
   http://standards-oui.ieee.org/oui.txt. However, the Wireshark project maintains a more complete listing, 
   located at https://gitlab.com/wireshark/wireshark/-/raw/master/manuf. Wireshark also offer a lookup web 
   application for this listing at https://www.wireshark.org/tools/oui-lookup.html.

Normally a MAC address is split equally, with the first 3 bytes (6 characters) being allocated to the OUI, 
  and the last 3 bytes being allocated to uniquely identify the device. However, organizations are able to 
  purchase longer OUIs (for a lower fee), which give them fewer device addresses to allocate.

The first 1,024 ports (numbered 0-1023) are almost never used as source ports – these are designated 
  specifically as server ports, and need root privileges to work with. Ports in the range of 1024-49151 are 
  designated "user ports" and 49152-65535 are dynamic or private ports. Servers are not however forced to use 
  ports numbered below 1024 though (almost every database server for instance uses port numbers above 1024), 
  and this is just a historical convention that dates back to when TCP and UDP were being developed and
  all server ports were below 1024

== A full listing of the ports that are formally assigned is maintained by the IANA, and is posted at 
   https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml.

== The TCP three-way handshake: 
1- The first packet comes from the client from an ephemeral port, to the server's (usually) fixed port. It is 
   has the SYN (synchronize) bit set, and has a randomly assigned SEQ (initial sequence) number, in this case 5432.
2- The reply packet from the server has the ACK (acknowledge) bit set, with a number of 5433, and also has the 
   SYN bit set with its own random SYN value, in this case 6543. This packet may already contain data in 
   addition to the handshake information (all subsequent packets may contain data).
3- The third packet is the ACK to the server's first SYN, with the number 6544.
4- Going forward, all packets are ACK packets sent to the other party so that every
   packet has a unique sequence number and a direction.




